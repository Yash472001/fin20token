{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","loaded","kycaddress","token","checkkycaddress","tokensaleaddress","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","Mytokeninstance","Contract","MyToken","abi","networks","address","Mytokensaleinstance","MyTokensale","kycinstance","kyc","setState","alert","error","handlekyc","methods","setkycaccounts","send","from","result","handlecheckkyc","kyccompleted","call","ownerofsc","owner","handlechanged","e","target","name","value","handleowner","handlebuytoken","buyTokens","this","className","type","placeholder","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0743cef4.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport getWeb3 from \"./getWeb3\";\nimport MyToken from \"./contracts/Mytoken.json\";\nimport MyTokensale from \"./contracts/MyTokenSale.json\";\nimport kyc from \"./contracts/KycContract.json\";\n\nclass App extends Component {\n  state = {\n    loaded: false,\n    kycaddress: \"\",\n    token: \"\",\n    checkkycaddress: \"\",\n    tokensaleaddress: \"\",\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.net.getId();\n\n      this.Mytokeninstance = new this.web3.eth.Contract(\n        MyToken.abi,\n        MyToken.networks[this.networkId] &&\n          MyToken.networks[this.networkId].address\n      );\n\n      this.Mytokensaleinstance = new this.web3.eth.Contract(\n        MyTokensale.abi,\n        MyTokensale.networks[this.networkId] &&\n          MyTokensale.networks[this.networkId].address\n      );\n\n      this.kycinstance = new this.web3.eth.Contract(\n        kyc.abi,\n        kyc.networks[this.networkId] && kyc.networks[this.networkId].address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        loaded: true,\n        tokensaleaddress: MyTokensale.networks[this.networkId].address,\n      });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  handlekyc = async () => {\n    const { kycaddress } = this.state;\n\n    const result = await this.kycinstance.methods\n      .setkycaccounts(kycaddress)\n      .send({ from: this.accounts[0] });\n    alert(`kyc is completed for ${kycaddress}`);\n\n    console.log(result);\n\n    this.setState({\n      kycaddress: \"\",\n    });\n  };\n\n  handlecheckkyc = async () => {\n    const { checkkycaddress } = this.state;\n\n    const result = await this.kycinstance.methods\n      .kyccompleted(checkkycaddress)\n      .call();\n\n    const owner = await this.kycinstance.methods.ownerofsc().call();\n    console.log(owner);\n\n    console.log(result);\n\n    // EVENTS\n\n    this.setState({\n      checkkycaddress: \"\",\n    });\n  };\n\n  handlechanged = (e) => {\n    const { name, value } = e.target;\n\n    this.setState({\n      ...this.state,\n      [name]: value,\n    });\n  };\n\n  handleowner = async () => {\n    const result = await this.kycinstance.methods\n      .ownerofsc()\n      .send({ from: this.accounts[0] });\n    console.log(result);\n  };\n\n  handlebuytoken = async () => {\n    const result = await this.Mytokensaleinstance.methods\n      .buyTokens(this.accounts[0])\n      .send({ from: this.accounts[0] , value: this.state.token });\n\n      \n  };\n\n  render() {\n    if (!this.state.loaded) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>This the tokensale of the fin20</h1>\n\n        <h3>complete the kyc</h3>\n        <input\n          type=\"text\"\n          placeholder=\"enter the address\"\n          name=\"kycaddress\"\n          value={this.state.kycaddress}\n          onChange={this.handlechanged}\n        />\n        <button onClick={this.handlekyc}>Complete the Kyc</button>\n\n        <h3>Check the kyc is completed or not</h3>\n        <input\n          type=\"text\"\n          placeholder=\"enter the address\"\n          name=\"checkkycaddress\"\n          value={this.state.checkkycaddress}\n          onChange={this.handlechanged}\n        />\n        <button onClick={this.handlecheckkyc}>CHECK</button>\n\n        <h3>BUY THE TOKEN</h3>\n        <input\n          type=\"text\"\n          placeholder=\"add the amount you buy\"\n          name=\"token\"\n          value={this.state.token}\n          onChange={this.handlechanged}\n        />\n        <button onClick={this.handlebuytoken}>BuyToken</button>\n\n        <a>{this.state.tokensaleaddress}</a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}